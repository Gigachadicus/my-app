const express = require('express');
const axios = require('axios');
const { MongoClient } = require('mongodb');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
const cors = require('cors')

app.use(cors())

const port = 5000;

// MongoDB connection URL
const mongoURL = 'mongodb+srv://pes1202201377:lisanlisan@cluster0.buvuxr1.mongodb.net/wwt-project?retryWrites=true&w=majority';

// Define the POST API endpoint
app.post('/saveContent', async(req, res) => {
    const username = 'user124'
    const { title, content, imageUrl } = req.body;
    if (!title || !content) {
        return res.status(400).json({ message: "Title and content are required fields." });
    }

    try {
        const client = await MongoClient.connect(mongoURL, { 
            useUnifiedTopology: true,
            useNewUrlParser: true });
        const db = client.db();
        const collectionName = username;  

        // Check if collection exists, create if it doesn't
        const collectionExists = await db.listCollections({ name: collectionName }).hasNext();
        if (!collectionExists) {
            await db.createCollection(collectionName);
            console.log('Created new collection');
        }
        const collection = db.collection(collectionName);

        const newContent = {
            title : title,
            content : content,
            imageUrl : imageUrl,
            date: new Date(),
            username: username, // Replace with the actual username or fetch it from the user's session
            upvotes: 0, // You might want to start with 0 upvotes or fetch this from the user's data
            IsPost : 1,
        };
        console.log('Received POST request data:', req.body);
        await collection.insertOne(newContent);
        console.log('Inserted data into collection');

        res.status(200).json({ message: 'Data inserted successfully' });
    } catch (error) {
        console.error('Error inserting data:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
    });

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});


{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Attach by Process ID",
            "processId": "${command:PickProcess}",
            "request": "attach",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "type": "node"
        }

    ]
}



import React, { useState, useRef } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS
import './App.css';


const RichTextEditor = ({
  onSaveDraft,
  appIconSrc,
  profileButtonText = 'profile',
  chooseImageButtonText = 'Choose Image',
  saveDraftButtonText = 'Save Draft',
  postButtonText = 'Post',
}) => {
  const [content, setContent] = useState('');
  const [image, setImage] = useState(null);
  const imageUploadInputRef = useRef(null);
  const [title, setTitle] = useState('');

  const containerStyle = {
    background: 'linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab)',
    backgroundSize: '400% 400%',
    animation: 'gradient 15s ease infinite',
    height: '100vh',
    marginTop: '0px', 
  };

  const profileButtonStyle = {
    cursor: 'pointer',
    marginLeft: 'auto',
  };
  
  const headerStyle = {
    width: '100%',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottom: '1px solid #ccc',
    paddingBottom: '20px',
    marginLeft: '20px',
  };

  const appIconStyle = {
    width: '40px',
    height: '40px',
  };

  const greyBoxStyle = {
    background: 'grey',
    borderRadius: '4px',
    padding: '20px',
    display: 'grid',
    gridTemplateColumns: '3.5fr 1fr',
    gap: '20px',
    marginLeft: '40px',
    marginRight: '40px',
    marginBottom: '20px',
    borderTop: '4000px',
  };

  const titleBoxStyle = {
    background: 'white',
    padding: '10px',
    borderRadius: '4px',
    marginTop: '20px', // Adjusted margin-top
  };

  const editorStyle = {
    background: 'white',
    paddingBottom: '50px',
    borderRadius: '4px',
    marginBottom: '20px', // Adjusted margin-bottom
  };

  const buttonContainerStyle = {
    marginTop: '20px',
    display: 'flex',
    justifyContent: 'space-between',
  };

  const rulesContainerStyle = {
    marginTop: '59px',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-end',
    marginRight: '20px', // Adjusted margin-right
  };

  const ruleBoxStyle = {
    background: '#f5f5f5',
    borderRadius: '4px',
    padding: '20px',
    height: '380px',
    width: '100%',
  };

  const handleEditorChange = (value) => {
    setContent(value);
  };

  const handleImageUpload = () => {
    imageUploadInputRef.current.click();
  };
  
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setImage({
          file,
          dataURL: e.target.result,
        });
      };
      reader.readAsDataURL(file);
    }
  };
  

  const handlePost = async () => {
    try {
      const currentDate = new Date();
      const username = 'YourUsername';
      const upvotes = 0;
  
      if (image) {

        const formData = new FormData();
        formData.append('image', image.file);
  
        const uploadResponse = await axios.post('/upload', formData);
        const imageUrl = uploadResponse.data.imageUrl;
  
        // Save content to MongoDB with image and additional details
        await axios.post('http://localhost:5000/saveContent', {
          title, // Replace with the actual title
          content,
          imageUrl,
          date: currentDate,
          username,
          upvotes,
          IsPost: 1,
        });
      } else {
        // Save content to MongoDB without image and additional details
        await axios.post('http://localhost:5000/saveContent', {
          title, // Replace with the actual title
          content,
          date: currentDate,
          username,
          upvotes,
          IsPost: 1,
        });
      }
  
      // Clear the content and image state
      setContent('');
      setImage(null);
  
      // Trigger any additional post actions or UI updates as needed
    } catch (error) {
      console.error('Error posting content:', error);
      // Handle error, display a message, or perform other actions
    }
  };
  let username = "user123"

  const handleSaveDraft = async () => {
    try {
      //needs title and content
      if (!title || !content) {
        console.error('Title and content are required.');
        return;
      }
      await axios.post('http://localhost:5000/saveContent', {
        title,
        content,
        imageUrl: image ? image.file : null,
        Is_post: 0, 
        username,
      });
      setContent('');
      setTitle(''); 
      setImage(null);
    } catch (error) {
      console.error('Error saving draft:', error);
    }
  };
  

  return (
    <div style={containerStyle}>
      {}
      <div style={headerStyle}>
        <div>
          <img src={appIconSrc} alt="App Icon" style={appIconStyle} />
        </div>
        <div style={profileButtonStyle}>{profileButtonText}</div>
      </div>

      {}
      <div style={containerStyle}>
        {}
        <div style={greyBoxStyle}>
          {}
          <div>
            {}
            <div>
              <button className="btn btn-info" onClick={handleImageUpload}>
                {chooseImageButtonText}
              </button>
            <input
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                style={{ display: 'none' }}
                ref={imageUploadInputRef}
              />
            </div>

            {}
            <div style={titleBoxStyle}>
              <input
                type="text"
                placeholder="Enter title"
                value={title}
                onChange={e => setTitle(e.target.value)}
                style={{ width: '100%', fontWeight: 'bold' }}
              />
            </div>

            {}
            <div style={editorStyle}>
              <ReactQuill
                theme="snow"
                value={content}
                onChange={handleEditorChange}
                style={{ width: '100%', height: '300px' }}
              />
            </div>
          </div>

          {}
          <div style={rulesContainerStyle}>
            <div style={ruleBoxStyle}>
              <h3>Community Rules</h3>
              <div>
                <label style={{ fontWeight: 'bold' }}>
                  Rule 1:
                </label>
                <div>Don't be mean</div>
              </div>
              <div>
                <label style={{ fontWeight: 'bold' }}>
                  Rule 2:
                </label>
                <div>No spam or self-promotion</div>
              </div>
            </div>
          </div>

          {}
          <div style={buttonContainerStyle}>
            <button className="btn btn-primary" onClick={handleSaveDraft}>
              {saveDraftButtonText}
            </button>
            <button className="btn btn-success" onClick={handlePost}>
              {postButtonText}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RichTextEditor;


new one 
const express = require('express');
const { MongoClient } = require('mongodb');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json({ limit: '10mb' }));
app.use(cors());

const port = 5000;

const mongoURL =
  'mongodb+srv://pes1202201377:lisanlisan@cluster0.buvuxr1.mongodb.net/wwt-project?retryWrites=true&w=majority';

// Define the POST API endpoint
app.post('/saveContent', async (req, res) => {
  const { title, content, image, date, username, likes } = req.body;
  if (!title || !content || !date || !username) {
    return res.status(400).json({ message: 'Title, content, date, and username are required fields.' });
  }
  try {
    const client = await MongoClient.connect(mongoURL, {
      useUnifiedTopology: true,
      useNewUrlParser: true,
    });
    const db = client.db();
    const collectionName = username;

    // Check if collection exists, create if it doesn't
    const collectionExists = await db.listCollections({ name: collectionName }).hasNext();
    if (!collectionExists) {
      await db.createCollection(collectionName);
      console.log('Created new collection');
    }
    const collection = db.collection(collectionName);
    const newContent = {
      title: title,
      content: content,
      image: image,
      date: new Date(date),
      username: username,
      likes: likes || 0,
    };

    console.log('Received POST request data:', req.body);
    await collection.insertOne(newContent);
    console.log('Inserted data into collection');
    res.status(200).json({ message: 'Data inserted successfully' });
  } catch (error) {
    console.error('Error inserting data:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});


import React, { useState, useRef } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';

const containerStyle = {
  background: 'linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab)',
  backgroundSize: '400% 400%',
  animation: 'gradient 15s ease infinite',
  height: '100vh',
  marginTop: '0px',
};

const profileButtonStyle = {
  cursor: 'pointer',
  marginLeft: 'auto',
};

const headerStyle = {
  width: '100%',
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  borderBottom: '1px solid #ccc',
  paddingBottom: '20px',
  marginLeft: '20px',
};

const appIconStyle = {
  width: '40px',
  height: '40px',
};

const greyBoxStyle = {
  background: 'grey',
  borderRadius: '4px',
  padding: '20px',
  display: 'grid',
  gridTemplateColumns: '3.5fr 1fr',
  gap: '20px',
  marginLeft: '40px',
  marginRight: '40px',
  marginBottom: '20px',
  borderTop: '4000px',
};

const titleBoxStyle = {
  background: 'white',
  padding: '10px',
  borderRadius: '4px',
  marginTop: '20px', // Adjusted margin-top
};

const editorStyle = {
  background: 'white',
  paddingBottom: '50px',
  borderRadius: '4px',
  marginBottom: '20px', // Adjusted margin-bottom
};

const buttonContainerStyle = {
  marginTop: '20px',
  display: 'flex',
  justifyContent: 'space-between',
};

const rulesContainerStyle = {
  marginTop: '59px',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'flex-end',
  marginRight: '20px', // Adjusted margin-right
};

const ruleBoxStyle = {
  background: '#f5f5f5',
  borderRadius: '4px',
  padding: '20px',
  height: '380px',
  width: '100%',
};

const RichTextEditor = ({
  appIconSrc,
  profileButtonText = 'profile',
  chooseImageButtonText = 'Choose Image',
  postButtonText = 'Post',
}) => {
  const [content, setContent] = useState('');
  const [image, setImage] = useState(null); // Initialize with null
  const imageUploadInputRef = useRef(React.createRef());
  const [title, setTitle] = useState('');

  const handleEditorChange = (value) => {
    setContent(value);
  };

  const handleImageUpload = () => {
    imageUploadInputRef.current.click();
  };

  const handleFileChange = async (event) => {
    const file = event.target.files[0];
    if (file) {
      try {
        const base64 = await convertToBase64(file);
        setImage(base64); // Set the image state with base64 data
      } catch (error) {
        console.error('Error converting file to base64:', error);
      }
    }
  };

  const handlePost = async () => {
    try {
      const currentDate = new Date();
      const username = 'YourUsername';
      const likes = 0;

      await fetch('http://localhost:5000/saveContent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title,
          content,
          image,
          date: currentDate,
          username,
          likes,
        }),
      });

      setTitle('');
      setContent('');
      setImage(null);

      console.log('Data posted successfully');
    } catch (error) {
      console.error('Error posting content:', error);
    }
  };

  return (
    <div style={containerStyle}>
      <div style={headerStyle}>
        <div>
          <img src={appIconSrc} alt="App Icon" style={appIconStyle} />
        </div>
        <div style={profileButtonStyle}>{profileButtonText}</div>
      </div>

      <div style={containerStyle}>
        <div style={greyBoxStyle}>
          <div>
            <div>
              <button className="btn btn-info" onClick={handleImageUpload}>
                {chooseImageButtonText}
              </button>
              <input
                type="file"
                accept=".jpeg, .jpg, .png"
                onChange={handleFileChange}
                style={{ display: 'none' }}
                ref={imageUploadInputRef}
              />
            </div>

            <div style={titleBoxStyle}>
              <input
                type="text"
                placeholder="Enter title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                style={{ width: '100%', fontWeight: 'bold' }}
              />
            </div>

            <div style={editorStyle}>
              <ReactQuill
                theme="snow"
                value={content}
                onChange={handleEditorChange}
                style={{ width: '100%', height: '300px' }}
              />
            </div>
          </div>

          <div style={rulesContainerStyle}>
            <div style={ruleBoxStyle}>
              <h3>Community Rules</h3>
              <div>
                <label style={{ fontWeight: 'bold' }}>Rule 1:</label>
                <div>Don't be mean</div>
              </div>
              <div>
                <label style={{ fontWeight: 'bold' }}>Rule 2:</label>
                <div>No spam or self-promotion</div>
              </div>
            </div>
          </div>

          <div style={buttonContainerStyle}>
            <button className="btn btn-success" onClick={handlePost}>
              {postButtonText}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RichTextEditor;

function convertToBase64(file) {
  return new Promise((resolve, reject) => {
    const fileReader = new FileReader();
    fileReader.readAsDataURL(file);
    fileReader.onload = () => {
      resolve(fileReader.result);
    };
    fileReader.onerror = (error) => {
      reject(error);
    };
  });
}
